{"version":3,"sources":["dist/scripts/jquery.agora-contact-form.js"],"names":["factory","window","$","jQuery","AgoraContactForm","opts","this","redirect","website","email","requestTypes","service","includeService","includeName","includePhone","selector","action","addFormAction","addFormMethod","addEmailField","addSeparator","addNameFields","addPhoneField","addRequestTypes","addServices","addMessageField","addHiddenField","addHunnyCheckboxField","addSubmitButton","prototype","attr","textField","add","first_name","phoneField","textarea","label","hunnyCheckField","CheckboxField","option","select","requestType","html","append","addField","fieldName","labelName","field","value","hiddenField","button","separator","element","define","amd"],"mappings":"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","file":"jquery.agora-contact-form.min.js","sourcesContent":["(function (factory) {\n  typeof define === 'function' && define.amd ? define('jqueryAgoraContactForm', factory) :\n  factory();\n}((function () { 'use strict';\n\n  /**\n   * Agora Contact Form v0.0.1\n   *\n   * This script makes it easy to add a customizable contact form to\n   * your website that sends customer questions and comments to\n   * Customer Service in a structured, easy-to-manage format.\n   *\n   * You can see an example of how to use it in the example.html file.\n   *\n   * It depends on jQuery for DOM manipulation, but you could probably\n   * get by with something lighter like Zepto or Angular's Jqlite.\n   *\n   *\n   * Legal Stuffs\n   * ------------\n   *\n   * This is free and open source, and comes with absolutely no warranty\n   * whatsoever. Use at your own risk.\n   *\n   * @author    Derek Conjar <dconjar@oxfordclub.com>\n   * @copyright The Oxford Club 2014\n   * @license   http://opensource.org/licenses/MIT\n   *\n   * @todo  Add client-side form validation\n   * @todo  Maybe provide feedback when options are missing?\n   */\n\n  (function (window) {\n    var $ = window.jQuery;\n    /**\n     * Construct the contact form\n     * @param {object} options\n     */\n\n    var AgoraContactForm = function AgoraContactForm(opts) {\n      this.redirect = opts.redirect; // Redirect here onsubmit\n\n      this.website = opts.email; // i.e. \"oxfordclub\"\n\n      this.requestTypes = opts.requestTypes; // see example.html\n\n      this.service = opts.service; // see example.html\n\n      this.includeService = opts.includeService; // include name fields?\n\n      this.includeName = opts.includeName; // include name fields?\n\n      this.includePhone = opts.includePhone; // include phone fields?\n\n      this.selector = opts.selector; // jQuery selector for form\n\n      this.action = opts.action; // form action URI\n      // Now let's add the contact form to the page based on the values\n      // provided in the opts object.\n\n      this.addFormAction();\n      this.addFormMethod();\n      this.addEmailField();\n      this.addSeparator();\n\n      if (this.includeName === true) {\n        this.addNameFields();\n        this.addSeparator();\n      }\n\n      if (this.includePhone === true) {\n        this.addPhoneField();\n        this.addSeparator();\n      }\n\n      this.addRequestTypes(); // this.addSeparator();\n\n      if (this.includeService === true) {\n        this.addServices(); // this.addSeparator();\n      }\n\n      this.addMessageField(); // this.addSeparator();\n\n      this.addHiddenField('website', this.website);\n      this.addHiddenField('redirect_url', this.redirect);\n      this.addHunnyCheckboxField();\n      this.addSubmitButton();\n    }; //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //\n    // These \"impure methods\" take no params and return nothing.\n    //\n    // They are responsible for taking form info provided via the\n    // \"opts\" object, and constructing the form via DOM manipulation.\n    //\n    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n    /**\n     * Add the form action based on the provided \"action\" option\n     */\n\n\n    AgoraContactForm.prototype.addFormAction = function () {\n      $(this.selector).attr('action', this.action);\n    };\n    /**\n     * Add the form method\n     */\n\n\n    AgoraContactForm.prototype.addFormMethod = function () {\n      $(this.selector).attr('method', 'post');\n    };\n    /**\n     * Create the email address field and append it to the form.\n     */\n\n\n    AgoraContactForm.prototype.addEmailField = function () {\n      var email = this.textField('email', 'Email Address');\n      this.add(email);\n      email.attr('placeholder', 'Email');\n      email.attr('class', 'form-control form-control-lg');\n      email.attr('type', 'email');\n    };\n    /**\n     * Create the firstname and lastname fields (including labels)\n     * Append them to the form.\n     */\n\n\n    AgoraContactForm.prototype.addNameFields = function () {\n      var first_name = this.textField('first_name'); //var last_name = this.textField('last_name');\n\n      this.add(first_name);\n      first_name.attr('placeholder', 'First Name and Last Name');\n      first_name.attr('class', 'form-control form-control-lg'); //this.add(last_name);\n      //last_name.attr('placeholder', 'Last Name');\n    };\n    /**\n     * Creates a phone number field and appends it to the form\n     */\n\n\n    AgoraContactForm.prototype.addPhoneField = function () {\n      var phoneField = this.textField('phone');\n      this.add(phoneField);\n      phoneField.attr('placeholder', 'Phone Number');\n      phoneField.attr('class', 'form-control form-control-lg');\n      phoneField.attr('type', 'tel');\n    };\n    /**\n     * Create the questions/comments textbox and add it to the form.\n     */\n\n\n    AgoraContactForm.prototype.addMessageField = function () {\n      var textarea = $('<textarea></textarea>');\n      var label = this.label('message', 'Questions/Comments');\n      textarea.attr('name', 'message');\n      textarea.attr('placeholder', 'Questions/Comments');\n      textarea.attr('class', 'form-control form-control-lg');\n      textarea.attr('required', 'true');\n      textarea.attr('rows', '4');\n      textarea.attr('cols', '50');\n      this.add(label);\n      this.add(textarea);\n    };\n    /**\n    * Create the Hunnypot Checkbox and add it to the form.\n    */\n\n\n    AgoraContactForm.prototype.addHunnyCheckboxField = function () {\n      var hunnyCheckField = this.CheckboxField('pot_of_honey');\n      this.add(hunnyCheckField);\n      hunnyCheckField.attr('class', 'hunny');\n      hunnyCheckField.attr('tabindex', '-1');\n      hunnyCheckField.attr('autocomplete', 'off');\n      hunnyCheckField.attr('style', 'display:none');\n    };\n    /**\n     * Create the \"Reason for Contacting\" select and add it to the form.\n     */\n\n\n    AgoraContactForm.prototype.addRequestTypes = function () {\n      var select = $('<select></select>');\n      var label = this.label('request_type', 'Reason for Contacting');\n      var option;\n      select.attr('name', 'request_type');\n      select.attr('class', 'form-control form-control-lg');\n      select.attr('required', 'true');\n\n      for (var requestType in this.requestTypes) {\n        option = $('<option></option>');\n        option.attr('value', this.requestTypes[requestType]);\n        option.html(requestType);\n        select.append(option);\n      }\n\n      this.add(label);\n      this.add(select);\n    };\n    /**\n    * Create the \"Service\" select and add it to the form.\n    */\n\n\n    AgoraContactForm.prototype.addServices = function () {\n      var select = $('<select></select>');\n      var label = this.label('service', 'Service');\n      var option;\n      select.attr('name', 'service');\n\n      for (var service in this.service) {\n        option = $('<option></option>');\n        option.attr('value', this.service[service]);\n        option.html(service);\n        select.append(option);\n      }\n\n      this.add(label);\n      this.add(select);\n    };\n    /**\n     * Add a textfield and label paired together to the form.\n     * @param  {str} fieldName => \"name\" attr of form field\n     * @param  {str} labelName => what the label should say\n     */\n\n\n    AgoraContactForm.prototype.addField = function (fieldName, labelName) {\n      var label = this.label(fieldName, labelName);\n      var field = this.textField(fieldName);\n      this.add(label);\n      this.add(field);\n    };\n    /**\n     * Add custom hidden fields to the form.\n     * @param {str} fieldName => the \"name\" attr\n     * @param {str} value     => the \"value\" attr\n     */\n\n\n    AgoraContactForm.prototype.addHiddenField = function (fieldName, value) {\n      var field = this.hiddenField(fieldName, value);\n      this.add(field);\n    };\n    /**\n     * Add the submit button to the form.\n     */\n\n\n    AgoraContactForm.prototype.addSubmitButton = function () {\n      var button = $('<button></button>');\n      button.attr('type', 'submit');\n      button.attr('name', 'submitBtn');\n      button.attr('class', 'btn navy-button');\n      button.html('Send Now');\n      this.add(button);\n    };\n    /**\n     * Append a horizontal rule to the form\n     */\n\n\n    AgoraContactForm.prototype.addSeparator = function () {\n      var separator = $('');\n      this.add(separator);\n    }; //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //\n    // These helper methods are used by the methods above. They\n    // provide abstractions for creating new fields and manipulating\n    // the DOM.\n    //\n    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n    /**\n     * Construct a new text input field based on the \"name\" attr\n     * @param  {str} name\n     * @return {obj} => the input field's jQuery object\n     */\n\n\n    AgoraContactForm.prototype.textField = function (fieldName) {\n      var field = $('<input>');\n      field.attr('type', 'text');\n      field.attr('name', fieldName);\n      field.attr('class', fieldName);\n      return field;\n    };\n    /**\n     * Construct a new hidden field based on the \"name\" and \"value\" attrs\n     * @param  {fieldName} => \"name\"  HTML attr\n     * @param  {value}     => \"value\" HTML attr\n     * @return {obj}       => the jQuery object\n     */\n\n\n    AgoraContactForm.prototype.hiddenField = function (fieldName, value) {\n      var field = $('<input>');\n      field.attr('type', 'hidden');\n      field.attr('name', fieldName);\n      field.attr('value', value);\n      return field;\n    };\n    /**\n     * Construct a new checkbox field based on the \"name\" and \"value\" attrs\n     * @param  {fieldName} => \"name\"  HTML attr\n     * @param  {value}     => \"value\" HTML attr\n     * @return {obj}       => the jQuery object\n     */\n\n\n    AgoraContactForm.prototype.CheckboxField = function (fieldName) {\n      var field = $('<input>');\n      field.attr('type', 'checkbox');\n      field.attr('name', fieldName); //field.attr('value', value);\n\n      return field;\n    };\n    /**\n     * Construct a new form label based on the \"name\" attr\n     * @param  {str} fieldName => \"name\" attr of form field\n     * @param  {str} labelName => what the label should say\n     * @return {obj} => the label's jQuery object\n     */\n\n\n    AgoraContactForm.prototype.label = function (fieldName, labelName) {\n      var label = $('');\n      label.attr('for', fieldName);\n      label.html(labelName);\n      return label;\n    };\n    /**\n     * Adds an element to the end of the form\n     * @param  {obj} element => the jQuery object\n     */\n\n\n    AgoraContactForm.prototype.add = function (element) {\n      $(this.selector).append(element);\n    };\n\n    window.AgoraContactForm = AgoraContactForm;\n  })(window);\n\n})));\n"]}